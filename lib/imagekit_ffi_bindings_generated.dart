// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for imagekit_ffi
class ImagekitFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ImagekitFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ImagekitFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Uint8> encode_bgra_to_jpeg_buffer(
    ffi.Pointer<ffi.Uint8> bgra,
    int width,
    int height,
    int quality,
    ffi.Pointer<ffi.Size> out_size,
  ) {
    return _encode_bgra_to_jpeg_buffer(
      bgra,
      width,
      height,
      quality,
      out_size,
    );
  }

  late final _encode_bgra_to_jpeg_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Size>)>>('encode_bgra_to_jpeg_buffer');
  late final _encode_bgra_to_jpeg_buffer =
      _encode_bgra_to_jpeg_bufferPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>, int, int, int, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Uint8> rotate_jpeg_buffer(
    ffi.Pointer<ffi.Uint8> jpeg_data,
    int jpeg_size,
    int rotationDegrees,
    ffi.Pointer<ffi.Size> out_size,
  ) {
    return _rotate_jpeg_buffer(
      jpeg_data,
      jpeg_size,
      rotationDegrees,
      out_size,
    );
  }

  late final _rotate_jpeg_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Size,
              ffi.Int, ffi.Pointer<ffi.Size>)>>('rotate_jpeg_buffer');
  late final _rotate_jpeg_buffer = _rotate_jpeg_bufferPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>, int, int, ffi.Pointer<ffi.Size>)>();

  void free_buffer(
    ffi.Pointer<ffi.Uint8> buffer,
  ) {
    return _free_buffer(
      buffer,
    );
  }

  late final _free_bufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>(
          'free_buffer');
  late final _free_buffer =
      _free_bufferPtr.asFunction<void Function(ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Uint8> rotate_rgba_image(
    ffi.Pointer<ffi.Uint8> rgba,
    int width,
    int height,
    int rotationDegrees,
  ) {
    return _rotate_rgba_image(
      rgba,
      width,
      height,
      rotationDegrees,
    );
  }

  late final _rotate_rgba_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, ffi.Int,
              ffi.Int, ffi.Int)>>('rotate_rgba_image');
  late final _rotate_rgba_image = _rotate_rgba_imagePtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>, int, int, int)>();

  ffi.Pointer<ffi.Uint8> convert_yuv420_to_rgba(
    ffi.Pointer<ffi.Uint8> y_plane,
    ffi.Pointer<ffi.Uint8> u_plane,
    ffi.Pointer<ffi.Uint8> v_plane,
    int width,
    int height,
    int y_stride,
    int u_stride,
    int v_stride,
    int u_pix_stride,
    int v_pix_stride,
    int rotationDegrees,
  ) {
    return _convert_yuv420_to_rgba(
      y_plane,
      u_plane,
      v_plane,
      width,
      height,
      y_stride,
      u_stride,
      v_stride,
      u_pix_stride,
      v_pix_stride,
      rotationDegrees,
    );
  }

  late final _convert_yuv420_to_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('convert_yuv420_to_rgba');
  late final _convert_yuv420_to_rgba = _convert_yuv420_to_rgbaPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int)>();

  ffi.Pointer<ffi.Uint8> convert_nv21_to_rgba(
    ffi.Pointer<ffi.Uint8> y_plane,
    ffi.Pointer<ffi.Uint8> uv_plane,
    int width,
    int height,
    int y_stride,
    int uv_stride,
    int uv_pix_stride,
    int rotationDegrees,
  ) {
    return _convert_nv21_to_rgba(
      y_plane,
      uv_plane,
      width,
      height,
      y_stride,
      uv_stride,
      uv_pix_stride,
      rotationDegrees,
    );
  }

  late final _convert_nv21_to_rgbaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('convert_nv21_to_rgba');
  late final _convert_nv21_to_rgba = _convert_nv21_to_rgbaPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>, int, int, int, int, int, int)>();

  ffi.Pointer<ffi.Uint8> encode_rgba_to_jpeg_buffer(
    ffi.Pointer<ffi.Uint8> rgba,
    int width,
    int height,
    int quality,
    ffi.Pointer<ffi.Size> out_size,
  ) {
    return _encode_rgba_to_jpeg_buffer(
      rgba,
      width,
      height,
      quality,
      out_size,
    );
  }

  late final _encode_rgba_to_jpeg_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Size>)>>('encode_rgba_to_jpeg_buffer');
  late final _encode_rgba_to_jpeg_buffer =
      _encode_rgba_to_jpeg_bufferPtr.asFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>, int, int, int, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Uint8> convert_yuv420_to_jpeg(
    ffi.Pointer<ffi.Uint8> y_plane,
    ffi.Pointer<ffi.Uint8> u_plane,
    ffi.Pointer<ffi.Uint8> v_plane,
    int width,
    int height,
    int y_stride,
    int u_stride,
    int v_stride,
    int u_pix_stride,
    int v_pix_stride,
    int rotationDegrees,
    int quality,
    ffi.Pointer<ffi.Size> out_size,
  ) {
    return _convert_yuv420_to_jpeg(
      y_plane,
      u_plane,
      v_plane,
      width,
      height,
      y_stride,
      u_stride,
      v_stride,
      u_pix_stride,
      v_pix_stride,
      rotationDegrees,
      quality,
      out_size,
    );
  }

  late final _convert_yuv420_to_jpegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Size>)>>('convert_yuv420_to_jpeg');
  late final _convert_yuv420_to_jpeg = _convert_yuv420_to_jpegPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Uint8> convert_nv21_to_jpeg(
    ffi.Pointer<ffi.Uint8> y_plane,
    ffi.Pointer<ffi.Uint8> uv_plane,
    int width,
    int height,
    int y_stride,
    int uv_stride,
    int uv_pix_stride,
    int rotationDegrees,
    int quality,
    ffi.Pointer<ffi.Size> out_size,
  ) {
    return _convert_nv21_to_jpeg(
      y_plane,
      uv_plane,
      width,
      height,
      y_stride,
      uv_stride,
      uv_pix_stride,
      rotationDegrees,
      quality,
      out_size,
    );
  }

  late final _convert_nv21_to_jpegPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Size>)>>('convert_nv21_to_jpeg');
  late final _convert_nv21_to_jpeg = _convert_nv21_to_jpegPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Size>)>();
}

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int NULL = 0;
